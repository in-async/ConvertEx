using System;
using System.Collections.Generic;
using System.Globalization;
using InAsync.Tests.TestHelpers.Models;

namespace InAsync.Tests.TestHelpers {

    using TryParseTestCase = ValueTuple<int, string, Type, IFormatProvider, bool, object>;

    public static class TryParseTestCaseStore {

        public static IEnumerable<(int testNumber, string input, Type conversionType, IFormatProvider provider, bool expected, object expectedResult)> Query<TConversionType>() {
            foreach (var item in _testCasesByType[typeof(TConversionType)]) {
                yield return (item.Item1, item.Item2, item.Item3, item.Item4, item.Item5, item.Item6 ?? default(TConversionType));
            }
        }

        public static IEnumerable<(int testNumber, string input, Type conversionType, IFormatProvider provider, bool expected, object expectedResult)> Query(Type conversionType) {
            return _testCasesByType[conversionType];
        }

        private static readonly CultureInfo InvariantCulture = CultureInfo.InvariantCulture;
        private static readonly string MaxOverflowNumberString = "1797693134862320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
        private static readonly string MinOverflowNumberString = "-1797693134862320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

        private readonly static CultureInfo StubJPCulture = ((Func<CultureInfo>)(() => {
            var stubCulture = new CultureInfo("ja-JP");
            stubCulture.NumberFormat.PositiveInfinitySymbol = "+∞";
            stubCulture.NumberFormat.NegativeInfinitySymbol = "-∞";
            stubCulture.NumberFormat.NaNSymbol = "NaN (非数値)";
            return stubCulture;
        }))();

        private static readonly IReadOnlyDictionary<Type, IReadOnlyList<TryParseTestCase>> _testCasesByType = new Dictionary<Type, IReadOnlyList<TryParseTestCase>> {
            [typeof(byte)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(byte), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(byte), InvariantCulture, true , (byte)0),
                ( 3, "0"                     , typeof(byte), null            , true , (byte)0),
                ( 4, "\t\n 1\t\n "           , typeof(byte), InvariantCulture, true , (byte)1),
                ( 5, byte.MinValue.ToString(), typeof(byte), InvariantCulture, true , byte.MinValue),
                ( 6, byte.MaxValue.ToString(), typeof(byte), InvariantCulture, true , byte.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(byte), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(byte), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(byte), InvariantCulture, true , (byte)1),
                (10, "-1"                    , typeof(byte), InvariantCulture, false, null),
                (11, "0x10"                  , typeof(byte), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(byte), InvariantCulture, false, null),
                (13, "1,234.56"              , typeof(byte), InvariantCulture, false, null),
                (14, null                    , typeof(byte), InvariantCulture, false, null),
                (15, "1,,"                   , typeof(byte), InvariantCulture, true , (byte)1),
                (16, "1,."                   , typeof(byte), InvariantCulture, false, null),
                (17, "1.."                   , typeof(byte), InvariantCulture, false, null),
                (18, ",1"                    , typeof(byte), InvariantCulture, false, null),
                (19, ".1"                    , typeof(byte), InvariantCulture, false, null),
                (20, "..1"                   , typeof(byte), InvariantCulture, false, null),
            },
            [typeof(byte?)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(byte?), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(byte?), InvariantCulture, true , (byte)0),
                ( 3, "0"                     , typeof(byte?), null            , true , (byte)0),
                ( 4, "\t\n 1\t\n "           , typeof(byte?), InvariantCulture, true , (byte)1),
                ( 5, byte.MinValue.ToString(), typeof(byte?), InvariantCulture, true , byte.MinValue),
                ( 6, byte.MaxValue.ToString(), typeof(byte?), InvariantCulture, true , byte.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(byte?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(byte?), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(byte?), InvariantCulture, true , (byte)1),
                (10, "-1"                    , typeof(byte?), InvariantCulture, false, null),
                (11, "0x10"                  , typeof(byte?), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(byte?), InvariantCulture, false, null),
                (13, "1,234.56"              , typeof(byte?), InvariantCulture, false, null),
                (14, null                    , typeof(byte?), InvariantCulture, true , null),
                (15, "1,,"                   , typeof(byte?), InvariantCulture, true , (byte)1),
                (16, "1,."                   , typeof(byte?), InvariantCulture, false, null),
                (17, "1.."                   , typeof(byte?), InvariantCulture, false, null),
                (18, ",1"                    , typeof(byte?), InvariantCulture, false, null),
                (19, ".1"                    , typeof(byte?), InvariantCulture, false, null),
                (20, "..1"                   , typeof(byte?), InvariantCulture, false, null),
            },
            [typeof(sbyte)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(sbyte), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(sbyte), InvariantCulture, true , (sbyte)0),
                ( 3, "0"                      , typeof(sbyte), null            , true , (sbyte)0),
                ( 4, "\t\n 1\t\n "            , typeof(sbyte), InvariantCulture, true , (sbyte)1),
                ( 5, sbyte.MinValue.ToString(), typeof(sbyte), InvariantCulture, true , sbyte.MinValue),
                ( 6, sbyte.MaxValue.ToString(), typeof(sbyte), InvariantCulture, true , sbyte.MaxValue),
                ( 7, MaxOverflowNumberString  , typeof(sbyte), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(sbyte), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(sbyte), InvariantCulture, true , (sbyte)1),
                (10, "-1"                     , typeof(sbyte), InvariantCulture, true , (sbyte)-1),
                (11, "0x10"                   , typeof(sbyte), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(sbyte), InvariantCulture, false, null),
                (13, "1,234.56"               , typeof(sbyte), InvariantCulture, false, null),
                (14, null                     , typeof(sbyte), InvariantCulture, false, null),
                (15, "1,,"                    , typeof(sbyte), InvariantCulture, true , (sbyte)1),
                (16, "1,."                    , typeof(sbyte), InvariantCulture, false, null),
                (17, "1.."                    , typeof(sbyte), InvariantCulture, false, null),
                (18, ",1"                     , typeof(sbyte), InvariantCulture, false, null),
                (19, ".1"                     , typeof(sbyte), InvariantCulture, false, null),
                (20, "..1"                    , typeof(sbyte), InvariantCulture, false, null),
            },
            [typeof(sbyte?)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(sbyte?), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(sbyte?), InvariantCulture, true , (sbyte)0),
                ( 3, "0"                      , typeof(sbyte?), null            , true , (sbyte)0),
                ( 4, "\t\n 1\t\n "            , typeof(sbyte?), InvariantCulture, true , (sbyte)1),
                ( 5, sbyte.MinValue.ToString(), typeof(sbyte?), InvariantCulture, true , sbyte.MinValue),
                ( 6, sbyte.MaxValue.ToString(), typeof(sbyte?), InvariantCulture, true , sbyte.MaxValue),
                ( 7, MaxOverflowNumberString  , typeof(sbyte?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(sbyte?), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(sbyte?), InvariantCulture, true , (sbyte)1),
                (10, "-1"                     , typeof(sbyte?), InvariantCulture, true , (sbyte)-1),
                (11, "0x10"                   , typeof(sbyte?), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(sbyte?), InvariantCulture, false, null),
                (13, "1,234.56"               , typeof(sbyte?), InvariantCulture, false, null),
                (14, null                     , typeof(sbyte?), InvariantCulture, true , null),
                (15, "1,,"                    , typeof(sbyte?), InvariantCulture, true , (sbyte)1),
                (16, "1,."                    , typeof(sbyte?), InvariantCulture, false, null),
                (17, "1.."                    , typeof(sbyte?), InvariantCulture, false, null),
                (18, ",1"                     , typeof(sbyte?), InvariantCulture, false, null),
                (19, ".1"                     , typeof(sbyte?), InvariantCulture, false, null),
                (20, "..1"                    , typeof(sbyte?), InvariantCulture, false, null),
            },
            [typeof(short)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(short), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(short), InvariantCulture, true , (short)0),
                ( 3, "0"                      , typeof(short), null            , true , (short)0),
                ( 4, "\t\n 1\t\n "            , typeof(short), InvariantCulture, true , (short)1),
                ( 5, short.MinValue.ToString(), typeof(short), InvariantCulture, true , short.MinValue),
                ( 6, short.MaxValue.ToString(), typeof(short), InvariantCulture, true , short.MaxValue),
                ( 7, MaxOverflowNumberString  , typeof(short), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(short), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(short), InvariantCulture, true , (short)1),
                (10, "-1"                     , typeof(short), InvariantCulture, true , (short)-1),
                (11, "0x10"                   , typeof(short), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(short), InvariantCulture, true , (short)1234),
                (13, "1,234.56"               , typeof(short), InvariantCulture, false, null),
                (14, null                     , typeof(short), InvariantCulture, false, null),
                (15, "1,,"                    , typeof(short), InvariantCulture, true , (short)1),
                (16, "1,."                    , typeof(short), InvariantCulture, false, null),
                (17, "1.."                    , typeof(short), InvariantCulture, false, null),
                (18, ",1"                     , typeof(short), InvariantCulture, false, null),
                (19, ".1"                     , typeof(short), InvariantCulture, false, null),
                (20, "..1"                    , typeof(short), InvariantCulture, false, null),
            },
            [typeof(short?)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(short?), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(short?), InvariantCulture, true , (short)0),
                ( 3, "0"                      , typeof(short?), null            , true , (short)0),
                ( 4, "\t\n 1\t\n "            , typeof(short?), InvariantCulture, true , (short)1),
                ( 5, short.MinValue.ToString(), typeof(short?), InvariantCulture, true , short.MinValue),
                ( 6, short.MaxValue.ToString(), typeof(short?), InvariantCulture, true , short.MaxValue),
                ( 7, MaxOverflowNumberString  , typeof(short?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(short?), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(short?), InvariantCulture, true , (short)1),
                (10, "-1"                     , typeof(short?), InvariantCulture, true , (short)-1),
                (11, "0x10"                   , typeof(short?), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(short?), InvariantCulture, true , (short)1234),
                (13, "1,234.56"               , typeof(short?), InvariantCulture, false, null),
                (14, null                     , typeof(short?), InvariantCulture, true , null),
                (15, "1,,"                    , typeof(short?), InvariantCulture, true , (short)1),
                (16, "1,."                    , typeof(short?), InvariantCulture, false, null),
                (17, "1.."                    , typeof(short?), InvariantCulture, false, null),
                (18, ",1"                     , typeof(short?), InvariantCulture, false, null),
                (19, ".1"                     , typeof(short?), InvariantCulture, false, null),
                (20, "..1"                    , typeof(short?), InvariantCulture, false, null),
            },
            [typeof(ushort)] = new TryParseTestCase[]{
                ( 1, ""                        , typeof(ushort), InvariantCulture, false, null),
                ( 2, "0"                       , typeof(ushort), InvariantCulture, true , (ushort)0),
                ( 3, "0"                       , typeof(ushort), null            , true , (ushort)0),
                ( 4, "\t\n 1\t\n "             , typeof(ushort), InvariantCulture, true , (ushort)1),
                ( 5, ushort.MinValue.ToString(), typeof(ushort), InvariantCulture, true , ushort.MinValue),
                ( 6, ushort.MaxValue.ToString(), typeof(ushort), InvariantCulture, true , ushort.MaxValue),
                ( 7, MaxOverflowNumberString   , typeof(ushort), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString   , typeof(ushort), InvariantCulture, false, null),
                ( 9, "+1"                      , typeof(ushort), InvariantCulture, true , (ushort)1),
                (10, "-1"                      , typeof(ushort), InvariantCulture, false, null),
                (11, "0x10"                    , typeof(ushort), InvariantCulture, false, null),
                (12, "1,234"                   , typeof(ushort), InvariantCulture, true , (ushort)1234),
                (13, "1,234.56"                , typeof(ushort), InvariantCulture, false, null),
                (14, null                      , typeof(ushort), InvariantCulture, false, null),
                (15, "1,,"                     , typeof(ushort), InvariantCulture, true , (ushort)1),
                (16, "1,."                     , typeof(ushort), InvariantCulture, false, null),
                (17, "1.."                     , typeof(ushort), InvariantCulture, false, null),
                (18, ",1"                      , typeof(ushort), InvariantCulture, false, null),
                (19, ".1"                      , typeof(ushort), InvariantCulture, false, null),
                (20, "..1"                     , typeof(ushort), InvariantCulture, false, null),
            },
            [typeof(ushort?)] = new TryParseTestCase[]{
                ( 1, ""                        , typeof(ushort?), InvariantCulture, false, null),
                ( 2, "0"                       , typeof(ushort?), InvariantCulture, true , (ushort)0),
                ( 3, "0"                       , typeof(ushort?), null            , true , (ushort)0),
                ( 4, "\t\n 1\t\n "             , typeof(ushort?), InvariantCulture, true , (ushort)1),
                ( 5, ushort.MinValue.ToString(), typeof(ushort?), InvariantCulture, true , ushort.MinValue),
                ( 6, ushort.MaxValue.ToString(), typeof(ushort?), InvariantCulture, true , ushort.MaxValue),
                ( 7, MaxOverflowNumberString   , typeof(ushort?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString   , typeof(ushort?), InvariantCulture, false, null),
                ( 9, "+1"                      , typeof(ushort?), InvariantCulture, true , (ushort)1),
                (10, "-1"                      , typeof(ushort?), InvariantCulture, false, null),
                (11, "0x10"                    , typeof(ushort?), InvariantCulture, false, null),
                (12, "1,234"                   , typeof(ushort?), InvariantCulture, true , (ushort)1234),
                (13, "1,234.56"                , typeof(ushort?), InvariantCulture, false, null),
                (14, null                      , typeof(ushort?), InvariantCulture, true , null),
                (15, "1,,"                     , typeof(ushort?), InvariantCulture, true , (ushort)1),
                (16, "1,."                     , typeof(ushort?), InvariantCulture, false, null),
                (17, "1.."                     , typeof(ushort?), InvariantCulture, false, null),
                (18, ",1"                      , typeof(ushort?), InvariantCulture, false, null),
                (19, ".1"                      , typeof(ushort?), InvariantCulture, false, null),
                (20, "..1"                     , typeof(ushort?), InvariantCulture, false, null),
            },
            [typeof(int)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(int), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(int), InvariantCulture, true , (int)0),
                ( 3, "0"                     , typeof(int), null            , true , (int)0),
                ( 4, "\t\n 1\t\n "           , typeof(int), InvariantCulture, true , (int)1),
                ( 5, int.MinValue.ToString() , typeof(int), InvariantCulture, true , int.MinValue),
                ( 6, int.MaxValue.ToString() , typeof(int), InvariantCulture, true , int.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(int), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(int), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(int), InvariantCulture, true , (int)1),
                (10, "-1"                    , typeof(int), InvariantCulture, true , (int)-1),
                (11, "0x10"                  , typeof(int), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(int), InvariantCulture, true , (int)1234),
                (13, "1,234.56"              , typeof(int), InvariantCulture, false, null),
                (14, null                    , typeof(int), InvariantCulture, false, null),
                (15, "1,,"                   , typeof(int), InvariantCulture, true , (int)1),
                (16, "1,."                   , typeof(int), InvariantCulture, false, null),
                (17, "1.."                   , typeof(int), InvariantCulture, false, null),
                (18, ",1"                    , typeof(int), InvariantCulture, false, null),
                (19, ".1"                    , typeof(int), InvariantCulture, false, null),
                (20, "..1"                   , typeof(int), InvariantCulture, false, null),
            },
            [typeof(int?)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(int?), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(int?), InvariantCulture, true , (int)0),
                ( 3, "0"                     , typeof(int?), null            , true , (int)0),
                ( 4, "\t\n 1\t\n "           , typeof(int?), InvariantCulture, true , (int)1),
                ( 5, int.MinValue.ToString() , typeof(int?), InvariantCulture, true , int.MinValue),
                ( 6, int.MaxValue.ToString() , typeof(int?), InvariantCulture, true , int.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(int?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(int?), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(int?), InvariantCulture, true , (int)1),
                (10, "-1"                    , typeof(int?), InvariantCulture, true , (int)-1),
                (11, "0x10"                  , typeof(int?), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(int?), InvariantCulture, true , (int)1234),
                (13, "1,234.56"              , typeof(int?), InvariantCulture, false, null),
                (14, null                    , typeof(int?), InvariantCulture, true , null),
                (15, "1,,"                   , typeof(int?), InvariantCulture, true , (int)1),
                (16, "1,."                   , typeof(int?), InvariantCulture, false, null),
                (17, "1.."                   , typeof(int?), InvariantCulture, false, null),
                (18, ",1"                    , typeof(int?), InvariantCulture, false, null),
                (19, ".1"                    , typeof(int?), InvariantCulture, false, null),
                (20, "..1"                   , typeof(int?), InvariantCulture, false, null),
            },
            [typeof(uint)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(uint), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(uint), InvariantCulture, true , (uint)0),
                ( 3, "0"                     , typeof(uint), null            , true , (uint)0),
                ( 4, "\t\n 1\t\n "           , typeof(uint), InvariantCulture, true , (uint)1),
                ( 5, uint.MinValue.ToString(), typeof(uint), InvariantCulture, true , uint.MinValue),
                ( 6, uint.MaxValue.ToString(), typeof(uint), InvariantCulture, true , uint.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(uint), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(uint), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(uint), InvariantCulture, true , (uint)1),
                (10, "-1"                    , typeof(uint), InvariantCulture, false, null),
                (11, "0x10"                  , typeof(uint), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(uint), InvariantCulture, true , (uint)1234),
                (13, "1,234.56"              , typeof(uint), InvariantCulture, false, null),
                (14, null                    , typeof(uint), InvariantCulture, false, null),
                (15, "1,,"                   , typeof(uint), InvariantCulture, true , (uint)1),
                (16, "1,."                   , typeof(uint), InvariantCulture, false, null),
                (17, "1.."                   , typeof(uint), InvariantCulture, false, null),
                (18, ",1"                    , typeof(uint), InvariantCulture, false, null),
                (19, ".1"                    , typeof(uint), InvariantCulture, false, null),
                (20, "..1"                   , typeof(uint), InvariantCulture, false, null),
            },
            [typeof(uint?)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(uint?), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(uint?), InvariantCulture, true , (uint)0),
                ( 3, "0"                     , typeof(uint?), null            , true , (uint)0),
                ( 4, "\t\n 1\t\n "           , typeof(uint?), InvariantCulture, true , (uint)1),
                ( 5, uint.MinValue.ToString(), typeof(uint?), InvariantCulture, true , uint.MinValue),
                ( 6, uint.MaxValue.ToString(), typeof(uint?), InvariantCulture, true , uint.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(uint?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(uint?), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(uint?), InvariantCulture, true , (uint)1),
                (10, "-1"                    , typeof(uint?), InvariantCulture, false, null),
                (11, "0x10"                  , typeof(uint?), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(uint?), InvariantCulture, true , (uint)1234),
                (13, "1,234.56"              , typeof(uint?), InvariantCulture, false, null),
                (14, null                    , typeof(uint?), InvariantCulture, true , null),
                (15, "1,,"                   , typeof(uint?), InvariantCulture, true , (uint)1),
                (16, "1,."                   , typeof(uint?), InvariantCulture, false, null),
                (17, "1.."                   , typeof(uint?), InvariantCulture, false, null),
                (18, ",1"                    , typeof(uint?), InvariantCulture, false, null),
                (19, ".1"                    , typeof(uint?), InvariantCulture, false, null),
                (20, "..1"                   , typeof(uint?), InvariantCulture, false, null),
            },
            [typeof(long)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(long), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(long), InvariantCulture, true , (long)0),
                ( 3, "0"                     , typeof(long), null            , true , (long)0),
                ( 4, "\t\n 1\t\n "           , typeof(long), InvariantCulture, true , (long)1),
                ( 5, long.MinValue.ToString(), typeof(long), InvariantCulture, true , long.MinValue),
                ( 6, long.MaxValue.ToString(), typeof(long), InvariantCulture, true , long.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(long), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(long), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(long), InvariantCulture, true , (long)1),
                (10, "-1"                    , typeof(long), InvariantCulture, true , (long)-1),
                (11, "0x10"                  , typeof(long), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(long), InvariantCulture, true , (long)1234),
                (13, "1,234.56"              , typeof(long), InvariantCulture, false, null),
                (14, null                    , typeof(long), InvariantCulture, false, null),
                (15, "1,,"                   , typeof(long), InvariantCulture, true , (long)1),
                (16, "1,."                   , typeof(long), InvariantCulture, false, null),
                (17, "1.."                   , typeof(long), InvariantCulture, false, null),
                (18, ",1"                    , typeof(long), InvariantCulture, false, null),
                (19, ".1"                    , typeof(long), InvariantCulture, false, null),
                (20, "..1"                   , typeof(long), InvariantCulture, false, null),
            },
            [typeof(long?)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(long?), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(long?), InvariantCulture, true , (long)0),
                ( 3, "0"                     , typeof(long?), null            , true , (long)0),
                ( 4, "\t\n 1\t\n "           , typeof(long?), InvariantCulture, true , (long)1),
                ( 5, long.MinValue.ToString(), typeof(long?), InvariantCulture, true , long.MinValue),
                ( 6, long.MaxValue.ToString(), typeof(long?), InvariantCulture, true , long.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(long?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(long?), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(long?), InvariantCulture, true , (long)1),
                (10, "-1"                    , typeof(long?), InvariantCulture, true , (long)-1),
                (11, "0x10"                  , typeof(long?), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(long?), InvariantCulture, true , (long)1234),
                (13, "1,234.56"              , typeof(long?), InvariantCulture, false, null),
                (14, null                    , typeof(long?), InvariantCulture, true , null),
                (15, "1,,"                   , typeof(long?), InvariantCulture, true , (long)1),
                (16, "1,."                   , typeof(long?), InvariantCulture, false, null),
                (17, "1.."                   , typeof(long?), InvariantCulture, false, null),
                (18, ",1"                    , typeof(long?), InvariantCulture, false, null),
                (19, ".1"                    , typeof(long?), InvariantCulture, false, null),
                (20, "..1"                   , typeof(long?), InvariantCulture, false, null),
            },
            [typeof(ulong)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(ulong), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(ulong), InvariantCulture, true , (ulong)0),
                ( 3, "0"                      , typeof(ulong), null            , true , (ulong)0),
                ( 4, "\t\n 1\t\n "            , typeof(ulong), InvariantCulture, true , (ulong)1),
                ( 5, ulong.MinValue.ToString(), typeof(ulong), InvariantCulture, true , ulong.MinValue),
                ( 6, ulong.MaxValue.ToString(), typeof(ulong), InvariantCulture, true , ulong.MaxValue),
                ( 7, MaxOverflowNumberString  , typeof(ulong), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(ulong), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(ulong), InvariantCulture, true , (ulong)1),
                (10, "-1"                     , typeof(ulong), InvariantCulture, false, null),
                (11, "0x10"                   , typeof(ulong), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(ulong), InvariantCulture, true , (ulong)1234),
                (13, "1,234.56"               , typeof(ulong), InvariantCulture, false, null),
                (14, null                     , typeof(ulong), InvariantCulture, false, null),
                (15, "1,,"                    , typeof(ulong), InvariantCulture, true , (ulong)1),
                (16, "1,."                    , typeof(ulong), InvariantCulture, false, null),
                (17, "1.."                    , typeof(ulong), InvariantCulture, false, null),
                (18, ",1"                     , typeof(ulong), InvariantCulture, false, null),
                (19, ".1"                     , typeof(ulong), InvariantCulture, false, null),
                (20, "..1"                    , typeof(ulong), InvariantCulture, false, null),
            },
            [typeof(ulong?)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(ulong?), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(ulong?), InvariantCulture, true , (ulong)0),
                ( 3, "0"                      , typeof(ulong?), null            , true , (ulong)0),
                ( 4, "\t\n 1\t\n "            , typeof(ulong?), InvariantCulture, true , (ulong)1),
                ( 5, ulong.MinValue.ToString(), typeof(ulong?), InvariantCulture, true , ulong.MinValue),
                ( 6, ulong.MaxValue.ToString(), typeof(ulong?), InvariantCulture, true , ulong.MaxValue),
                ( 7, MaxOverflowNumberString  , typeof(ulong?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(ulong?), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(ulong?), InvariantCulture, true , (ulong)1),
                (10, "-1"                     , typeof(ulong?), InvariantCulture, false, null),
                (11, "0x10"                   , typeof(ulong?), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(ulong?), InvariantCulture, true , (ulong)1234),
                (13, "1,234.56"               , typeof(ulong?), InvariantCulture, false, null),
                (14, null                     , typeof(ulong?), InvariantCulture, true , null),
                (15, "1,,"                    , typeof(ulong?), InvariantCulture, true , (ulong)1),
                (16, "1,."                    , typeof(ulong?), InvariantCulture, false, null),
                (17, "1.."                    , typeof(ulong?), InvariantCulture, false, null),
                (18, ",1"                     , typeof(ulong?), InvariantCulture, false, null),
                (19, ".1"                     , typeof(ulong?), InvariantCulture, false, null),
                (20, "..1"                    , typeof(ulong?), InvariantCulture, false, null),
            },
            [typeof(float)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(float), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(float), InvariantCulture, true , (float)0),
                ( 3, "0"                      , typeof(float), null            , true , (float)0),
                ( 4, "\t\n 1\t\n "            , typeof(float), InvariantCulture, true , (float)1),
                ( 5, float.MinValue.ToString(), typeof(float), InvariantCulture, true , float.Parse(float.MinValue.ToString())),
                ( 6, float.MaxValue.ToString(), typeof(float), InvariantCulture, true , float.Parse(float.MaxValue.ToString())),
                ( 7, MaxOverflowNumberString  , typeof(float), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(float), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(float), InvariantCulture, true , (float)1),
                (10, "-1"                     , typeof(float), InvariantCulture, true , (float)-1),
                (11, "0x10"                   , typeof(float), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(float), InvariantCulture, true , (float)1234),
                (13, "1,234.56"               , typeof(float), InvariantCulture, true , (float)1234.56),
                (14, null                     , typeof(float), InvariantCulture, false, null),
                (15, "-Infinity"              , typeof(float), InvariantCulture, true , float.NegativeInfinity),
                (16, "+Infinity"              , typeof(float), InvariantCulture, false, null),
                (17, "Infinity"               , typeof(float), InvariantCulture, true , float.PositiveInfinity),
                (18, "NaN"                    , typeof(float), InvariantCulture, true , float.NaN),
                (19, "-Infinity"              , typeof(float), StubJPCulture   , false, null),
                (20, "+Infinity"              , typeof(float), StubJPCulture   , false, null),
                (21, "Infinity"               , typeof(float), StubJPCulture   , false, null),
                (22, "NaN"                    , typeof(float), StubJPCulture   , false, null),
                (23, "-∞"                    , typeof(float), InvariantCulture, false, null),
                (24, "+∞"                    , typeof(float), InvariantCulture, false, null),
                (25, "∞"                     , typeof(float), InvariantCulture, false, null),
                (26, "NaN (非数値)"           , typeof(float), InvariantCulture, false, null),
                (27, "-∞"                    , typeof(float), StubJPCulture   , true , float.NegativeInfinity),
                (28, "+∞"                    , typeof(float), StubJPCulture   , true , float.PositiveInfinity),
                (29, "∞"                     , typeof(float), StubJPCulture   , false, null),
                (30, "NaN (非数値)"           , typeof(float), StubJPCulture   , true , float.NaN),
                (31, "1,,"                    , typeof(float), InvariantCulture, true , (float)1),
                (32, "1,."                    , typeof(float), InvariantCulture, true , (float)1),
                (33, "1.."                    , typeof(float), InvariantCulture, false, null),
                (34, ",1"                     , typeof(float), InvariantCulture, false, null),
                (35, ".1"                     , typeof(float), InvariantCulture, true , (float).1),
                (36, "..1"                    , typeof(float), InvariantCulture, false, null),
            },
            [typeof(float?)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(float?), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(float?), InvariantCulture, true , (float)0),
                ( 3, "0"                      , typeof(float?), null            , true , (float)0),
                ( 4, "\t\n 1\t\n "            , typeof(float?), InvariantCulture, true , (float)1),
                ( 5, float.MinValue.ToString(), typeof(float?), InvariantCulture, true , float.Parse(float.MinValue.ToString())),
                ( 6, float.MaxValue.ToString(), typeof(float?), InvariantCulture, true , float.Parse(float.MaxValue.ToString())),
                ( 7, MaxOverflowNumberString  , typeof(float?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(float?), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(float?), InvariantCulture, true , (float)1),
                (10, "-1"                     , typeof(float?), InvariantCulture, true , (float)-1),
                (11, "0x10"                   , typeof(float?), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(float?), InvariantCulture, true , (float)1234),
                (13, "1,234.56"               , typeof(float?), InvariantCulture, true , (float)1234.56),
                (14, null                     , typeof(float?), InvariantCulture, true , null),
                (15, "-Infinity"              , typeof(float?), InvariantCulture, true , float.NegativeInfinity),
                (16, "+Infinity"              , typeof(float?), InvariantCulture, false, null),
                (17, "Infinity"               , typeof(float?), InvariantCulture, true , float.PositiveInfinity),
                (18, "NaN"                    , typeof(float?), InvariantCulture, true , float.NaN),
                (19, "-Infinity"              , typeof(float?), StubJPCulture   , false, null),
                (20, "+Infinity"              , typeof(float?), StubJPCulture   , false, null),
                (21, "Infinity"               , typeof(float?), StubJPCulture   , false, null),
                (22, "NaN"                    , typeof(float?), StubJPCulture   , false, null),
                (23, "-∞"                    , typeof(float?), InvariantCulture, false, null),
                (24, "+∞"                    , typeof(float?), InvariantCulture, false, null),
                (25, "∞"                     , typeof(float?), InvariantCulture, false, null),
                (26, "NaN (非数値)"           , typeof(float?), InvariantCulture, false, null),
                (27, "-∞"                    , typeof(float?), StubJPCulture   , true , float.NegativeInfinity),
                (28, "+∞"                    , typeof(float?), StubJPCulture   , true , float.PositiveInfinity),
                (29, "∞"                     , typeof(float?), StubJPCulture   , false, null),
                (30, "NaN (非数値)"           , typeof(float?), StubJPCulture   , true , float.NaN),
                (31, "1,,"                    , typeof(float?), InvariantCulture, true , (float)1),
                (32, "1,."                    , typeof(float?), InvariantCulture, true , (float)1),
                (33, "1.."                    , typeof(float?), InvariantCulture, false, null),
                (34, ",1"                     , typeof(float?), InvariantCulture, false, null),
                (35, ".1"                     , typeof(float?), InvariantCulture, true , (float).1),
                (36, "..1"                    , typeof(float?), InvariantCulture, false, null),
            },
            [typeof(double)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(double), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(double), InvariantCulture, true , (double)0),
                ( 3, "0"                      , typeof(double), null            , true , (double)0),
                ( 4, "\t\n 1\t\n "            , typeof(double), InvariantCulture, true , (double)1),
                ( 5, float.MinValue.ToString(), typeof(double), InvariantCulture, true , double.Parse(float.MinValue.ToString())),
                ( 6, float.MaxValue.ToString(), typeof(double), InvariantCulture, true , double.Parse(float.MaxValue.ToString())),
                ( 7, MaxOverflowNumberString  , typeof(double), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(double), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(double), InvariantCulture, true , (double)1),
                (10, "-1"                     , typeof(double), InvariantCulture, true , (double)-1),
                (11, "0x10"                   , typeof(double), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(double), InvariantCulture, true , (double)1234),
                (13, "1,234.56"               , typeof(double), InvariantCulture, true , (double)1234.56),
                (14, null                     , typeof(double), InvariantCulture, false, null),
                (15, "-Infinity"              , typeof(double), InvariantCulture, true , double.NegativeInfinity),
                (16, "+Infinity"              , typeof(double), InvariantCulture, false, null),
                (17, "Infinity"               , typeof(double), InvariantCulture, true , double.PositiveInfinity),
                (18, "NaN"                    , typeof(double), InvariantCulture, true , double.NaN),
                (19, "-Infinity"              , typeof(double), StubJPCulture   , false, null),
                (20, "+Infinity"              , typeof(double), StubJPCulture   , false, null),
                (21, "Infinity"               , typeof(double), StubJPCulture   , false, null),
                (22, "NaN"                    , typeof(double), StubJPCulture   , false, null),
                (23, "-∞"                    , typeof(double), InvariantCulture, false, null),
                (24, "+∞"                    , typeof(double), InvariantCulture, false, null),
                (25, "∞"                     , typeof(double), InvariantCulture, false, null),
                (26, "NaN (非数値)"           , typeof(double), InvariantCulture, false, null),
                (27, "-∞"                    , typeof(double), StubJPCulture   , true , double.NegativeInfinity),
                (28, "+∞"                    , typeof(double), StubJPCulture   , true , double.PositiveInfinity),
                (29, "∞"                     , typeof(double), StubJPCulture   , false, null),
                (30, "NaN (非数値)"           , typeof(double), StubJPCulture   , true , double.NaN),
                (31, "1,,"                    , typeof(double), InvariantCulture, true , (double)1),
                (32, "1,."                    , typeof(double), InvariantCulture, true , (double)1),
                (33, "1.."                    , typeof(double), InvariantCulture, false, null),
                (34, ",1"                     , typeof(double), InvariantCulture, false, null),
                (35, ".1"                     , typeof(double), InvariantCulture, true , (double).1),
                (36, "..1"                    , typeof(double), InvariantCulture, false, null),
            },
            [typeof(double?)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(double?), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(double?), InvariantCulture, true , (double)0),
                ( 3, "0"                      , typeof(double?), null            , true , (double)0),
                ( 4, "\t\n 1\t\n "            , typeof(double?), InvariantCulture, true , (double)1),
                ( 5, float.MinValue.ToString(), typeof(double?), InvariantCulture, true , double.Parse(float.MinValue.ToString())),
                ( 6, float.MaxValue.ToString(), typeof(double?), InvariantCulture, true , double.Parse(float.MaxValue.ToString())),
                ( 7, MaxOverflowNumberString  , typeof(double?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString  , typeof(double?), InvariantCulture, false, null),
                ( 9, "+1"                     , typeof(double?), InvariantCulture, true , (double)1),
                (10, "-1"                     , typeof(double?), InvariantCulture, true , (double)-1),
                (11, "0x10"                   , typeof(double?), InvariantCulture, false, null),
                (12, "1,234"                  , typeof(double?), InvariantCulture, true , (double)1234),
                (13, "1,234.56"               , typeof(double?), InvariantCulture, true , (double)1234.56),
                (14, null                     , typeof(double?), InvariantCulture, true , null),
                (15, "-Infinity"              , typeof(double?), InvariantCulture, true , double.NegativeInfinity),
                (16, "+Infinity"              , typeof(double?), InvariantCulture, false, null),
                (17, "Infinity"               , typeof(double?), InvariantCulture, true , double.PositiveInfinity),
                (18, "NaN"                    , typeof(double?), InvariantCulture, true , double.NaN),
                (19, "-Infinity"              , typeof(double?), StubJPCulture   , false, null),
                (20, "+Infinity"              , typeof(double?), StubJPCulture   , false, null),
                (21, "Infinity"               , typeof(double?), StubJPCulture   , false, null),
                (22, "NaN"                    , typeof(double?), StubJPCulture   , false, null),
                (23, "-∞"                    , typeof(double?), InvariantCulture, false, null),
                (24, "+∞"                    , typeof(double?), InvariantCulture, false, null),
                (25, "∞"                     , typeof(double?), InvariantCulture, false, null),
                (26, "NaN (非数値)"           , typeof(double?), InvariantCulture, false, null),
                (27, "-∞"                    , typeof(double?), StubJPCulture   , true , double.NegativeInfinity),
                (28, "+∞"                    , typeof(double?), StubJPCulture   , true , double.PositiveInfinity),
                (29, "∞"                     , typeof(double?), StubJPCulture   , false, null),
                (30, "NaN (非数値)"           , typeof(double?), StubJPCulture   , true , double.NaN),
                (31, "1,,"                    , typeof(double?), InvariantCulture, true , (double)1),
                (32, "1,."                    , typeof(double?), InvariantCulture, true , (double)1),
                (33, "1.."                    , typeof(double?), InvariantCulture, false, null),
                (34, ",1"                     , typeof(double?), InvariantCulture, false, null),
                (35, ".1"                     , typeof(double?), InvariantCulture, true , (double).1),
                (36, "..1"                    , typeof(double?), InvariantCulture, false, null),
            },
            [typeof(decimal)] = new TryParseTestCase[]{
                ( 1, ""                         , typeof(decimal), InvariantCulture, false, null),
                ( 2, "0"                        , typeof(decimal), InvariantCulture, true , (decimal)0),
                ( 3, "0"                        , typeof(decimal), null            , true , (decimal)0),
                ( 4, "\t\n 1\t\n "              , typeof(decimal), InvariantCulture, true , (decimal)1),
                ( 5, decimal.MinValue.ToString(), typeof(decimal), InvariantCulture, true , decimal.Parse(decimal.MinValue.ToString())),
                ( 6, decimal.MaxValue.ToString(), typeof(decimal), InvariantCulture, true , decimal.Parse(decimal.MaxValue.ToString())),
                ( 7, MaxOverflowNumberString    , typeof(decimal), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString    , typeof(decimal), InvariantCulture, false, null),
                ( 9, "+1"                       , typeof(decimal), InvariantCulture, true , (decimal)1),
                (10, "-1"                       , typeof(decimal), InvariantCulture, true , (decimal)-1),
                (11, "0x10"                     , typeof(decimal), InvariantCulture, false, null),
                (12, "1,234"                    , typeof(decimal), InvariantCulture, true , (decimal)1234),
                (13, "1,234.56"                 , typeof(decimal), InvariantCulture, true , (decimal)1234.56),
                (14, null                       , typeof(decimal), InvariantCulture, false, null),
                (15, "-Infinity"                , typeof(decimal), InvariantCulture, false, null),
                (16, "+Infinity"                , typeof(decimal), InvariantCulture, false, null),
                (17, "Infinity"                 , typeof(decimal), InvariantCulture, false, null),
                (18, "NaN"                      , typeof(decimal), InvariantCulture, false, null),
                (19, "-Infinity"                , typeof(decimal), StubJPCulture   , false, null),
                (20, "+Infinity"                , typeof(decimal), StubJPCulture   , false, null),
                (21, "Infinity"                 , typeof(decimal), StubJPCulture   , false, null),
                (22, "NaN"                      , typeof(decimal), StubJPCulture   , false, null),
                (23, "-∞"                      , typeof(decimal), InvariantCulture, false, null),
                (24, "+∞"                      , typeof(decimal), InvariantCulture, false, null),
                (25, "∞"                       , typeof(decimal), InvariantCulture, false, null),
                (26, "NaN (非数値)"             , typeof(decimal), InvariantCulture, false, null),
                (27, "-∞"                      , typeof(decimal), StubJPCulture   , false, null),
                (28, "+∞"                      , typeof(decimal), StubJPCulture   , false, null),
                (29, "∞"                       , typeof(decimal), StubJPCulture   , false, null),
                (30, "NaN (非数値)"             , typeof(decimal), StubJPCulture   , false, null),
                (31, decimal.Zero.ToString()    , typeof(decimal), InvariantCulture, true , decimal.Zero),
                (32, decimal.One.ToString()     , typeof(decimal), InvariantCulture, true , decimal.One),
                (33, decimal.MinusOne.ToString(), typeof(decimal), InvariantCulture, true , decimal.MinusOne),
                (34, "1,,"                      , typeof(decimal), InvariantCulture, true , (decimal)1),
                (35, "1,."                      , typeof(decimal), InvariantCulture, true , (decimal)1),
                (36, "1.."                      , typeof(decimal), InvariantCulture, false, null),
                (37, ",1"                       , typeof(decimal), InvariantCulture, false, null),
                (38, ".1"                       , typeof(decimal), InvariantCulture, true , (decimal).1),
                (39, "..1"                      , typeof(decimal), InvariantCulture, false, null),
            },
            [typeof(decimal?)] = new TryParseTestCase[]{
                ( 1, ""                         , typeof(decimal?), InvariantCulture, false, null),
                ( 2, "0"                        , typeof(decimal?), InvariantCulture, true , (decimal)0),
                ( 3, "0"                        , typeof(decimal?), null            , true , (decimal)0),
                ( 4, "\t\n 1\t\n "              , typeof(decimal?), InvariantCulture, true , (decimal)1),
                ( 5, decimal.MinValue.ToString(), typeof(decimal?), InvariantCulture, true , decimal.Parse(decimal.MinValue.ToString())),
                ( 6, decimal.MaxValue.ToString(), typeof(decimal?), InvariantCulture, true , decimal.Parse(decimal.MaxValue.ToString())),
                ( 7, MaxOverflowNumberString    , typeof(decimal?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString    , typeof(decimal?), InvariantCulture, false, null),
                ( 9, "+1"                       , typeof(decimal?), InvariantCulture, true , (decimal)1),
                (10, "-1"                       , typeof(decimal?), InvariantCulture, true , (decimal)-1),
                (11, "0x10"                     , typeof(decimal?), InvariantCulture, false, null),
                (12, "1,234"                    , typeof(decimal?), InvariantCulture, true , (decimal)1234),
                (13, "1,234.56"                 , typeof(decimal?), InvariantCulture, true , (decimal)1234.56),
                (14, null                       , typeof(decimal?), InvariantCulture, true , null),
                (15, "-Infinity"                , typeof(decimal?), InvariantCulture, false, null),
                (16, "+Infinity"                , typeof(decimal?), InvariantCulture, false, null),
                (17, "Infinity"                 , typeof(decimal?), InvariantCulture, false, null),
                (18, "NaN"                      , typeof(decimal?), InvariantCulture, false, null),
                (19, "-Infinity"                , typeof(decimal?), StubJPCulture       , false, null),
                (20, "+Infinity"                , typeof(decimal?), StubJPCulture       , false, null),
                (21, "Infinity"                 , typeof(decimal?), StubJPCulture       , false, null),
                (22, "NaN"                      , typeof(decimal?), StubJPCulture       , false, null),
                (23, "-∞"                      , typeof(decimal?), InvariantCulture, false, null),
                (24, "+∞"                      , typeof(decimal?), InvariantCulture, false, null),
                (25, "∞"                       , typeof(decimal?), InvariantCulture, false, null),
                (26, "NaN (非数値)"             , typeof(decimal?), InvariantCulture, false, null),
                (27, "-∞"                      , typeof(decimal?), StubJPCulture   , false, null),
                (28, "+∞"                      , typeof(decimal?), StubJPCulture   , false, null),
                (29, "∞"                       , typeof(decimal?), StubJPCulture   , false, null),
                (30, "NaN (非数値)"             , typeof(decimal?), StubJPCulture   , false, null),
                (31, decimal.Zero.ToString()    , typeof(decimal?), InvariantCulture, true , decimal.Zero),
                (32, decimal.One.ToString()     , typeof(decimal?), InvariantCulture, true , decimal.One),
                (33, decimal.MinusOne.ToString(), typeof(decimal?), InvariantCulture, true , decimal.MinusOne),
                (34, "1,,"                      , typeof(decimal?), InvariantCulture, true , (decimal)1),
                (35, "1,."                      , typeof(decimal?), InvariantCulture, true , (decimal)1),
                (36, "1.."                      , typeof(decimal?), InvariantCulture, false, null),
                (37, ",1"                       , typeof(decimal?), InvariantCulture, false, null),
                (38, ".1"                       , typeof(decimal?), InvariantCulture, true , (decimal).1),
                (39, "..1"                      , typeof(decimal?), InvariantCulture, false, null),
            },
            [typeof(bool)] = new TryParseTestCase[]{
                ( 1, ""         , typeof(bool), InvariantCulture, false, null),
                ( 2, "true"     , typeof(bool), InvariantCulture, true , true),
                ( 3, "true"     , typeof(bool), null            , true , true),
                ( 4, "\ttrue\n ", typeof(bool), InvariantCulture, true , true),
                ( 5, "false"    , typeof(bool), InvariantCulture, true , false),
                ( 6, "True"     , typeof(bool), InvariantCulture, true , true),
                ( 7, "False"    , typeof(bool), InvariantCulture, true , false),
                ( 8, "TRUE"     , typeof(bool), InvariantCulture, true , true),
                ( 9, "FALSE"    , typeof(bool), InvariantCulture, true , false),
                (10, "tRue"     , typeof(bool), InvariantCulture, true , true),
                (11, "fAlse"    , typeof(bool), InvariantCulture, true , false),
                (12, "0"        , typeof(bool), InvariantCulture, false, null),
                (13, "+1"       , typeof(bool), InvariantCulture, false, null),
                (14, "-1"       , typeof(bool), InvariantCulture, false, null),
                (15, "0x10"     , typeof(bool), InvariantCulture, false, null),
                (16, null       , typeof(bool), InvariantCulture, false, null),
            },
            [typeof(bool?)] = new TryParseTestCase[]{
                ( 1, ""         , typeof(bool?), InvariantCulture, false, null),
                ( 2, "true"     , typeof(bool?), InvariantCulture, true , true),
                ( 3, "true"     , typeof(bool?), null            , true , true),
                ( 4, "\ttrue\n ", typeof(bool?), InvariantCulture, true , true),
                ( 5, "false"    , typeof(bool?), InvariantCulture, true , false),
                ( 6, "True"     , typeof(bool?), InvariantCulture, true , true),
                ( 7, "False"    , typeof(bool?), InvariantCulture, true , false),
                ( 8, "TRUE"     , typeof(bool?), InvariantCulture, true , true),
                ( 9, "FALSE"    , typeof(bool?), InvariantCulture, true , false),
                (10, "tRue"     , typeof(bool?), InvariantCulture, true , true),
                (11, "fAlse"    , typeof(bool?), InvariantCulture, true , false),
                (12, "0"        , typeof(bool?), InvariantCulture, false, null),
                (13, "+1"       , typeof(bool?), InvariantCulture, false, null),
                (14, "-1"       , typeof(bool?), InvariantCulture, false, null),
                (15, "0x10"     , typeof(bool?), InvariantCulture, false, null),
                (16, null       , typeof(bool?), InvariantCulture, true , null),
            },
            [typeof(char)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(char), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(char), InvariantCulture, true , '0'),
                ( 3, "0"                     , typeof(char), null            , true , '0'),
                ( 4, " 1 "                   , typeof(char), InvariantCulture, false, null),
                ( 5, char.MinValue.ToString(), typeof(char), InvariantCulture, true , char.MinValue),
                ( 6, char.MaxValue.ToString(), typeof(char), InvariantCulture, true , char.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(char), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(char), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(char), InvariantCulture, false, null),
                (10, "-1"                    , typeof(char), InvariantCulture, false, null),
                (11, "0x10"                  , typeof(char), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(char), InvariantCulture, false, null),
                (13, "1,234.56"              , typeof(char), InvariantCulture, false, null),
                (14, null                    , typeof(char), InvariantCulture, false, null),
                (15, "a"                     , typeof(char), InvariantCulture, true , 'a'),
                (16, "ab"                    , typeof(char), InvariantCulture, false, null),
                (17, "あ"                    , typeof(char), InvariantCulture, true , 'あ'),
                (18, "あ"                    , typeof(char), StubJPCulture   , true , 'あ'),
            },
            [typeof(char?)] = new TryParseTestCase[]{
                ( 1, ""                      , typeof(char?), InvariantCulture, false, null),
                ( 2, "0"                     , typeof(char?), InvariantCulture, true , '0'),
                ( 3, "0"                     , typeof(char?), null            , true , '0'),
                ( 4, " 1 "                   , typeof(char?), InvariantCulture, false, null),
                ( 5, char.MinValue.ToString(), typeof(char?), InvariantCulture, true , char.MinValue),
                ( 6, char.MaxValue.ToString(), typeof(char?), InvariantCulture, true , char.MaxValue),
                ( 7, MaxOverflowNumberString , typeof(char?), InvariantCulture, false, null),
                ( 8, MinOverflowNumberString , typeof(char?), InvariantCulture, false, null),
                ( 9, "+1"                    , typeof(char?), InvariantCulture, false, null),
                (10, "-1"                    , typeof(char?), InvariantCulture, false, null),
                (11, "0x10"                  , typeof(char?), InvariantCulture, false, null),
                (12, "1,234"                 , typeof(char?), InvariantCulture, false, null),
                (13, "1,234.56"              , typeof(char?), InvariantCulture, false, null),
                (14, null                    , typeof(char?), InvariantCulture, true , null),
                (15, "a"                     , typeof(char?), InvariantCulture, true , 'a'),
                (16, "ab"                    , typeof(char?), InvariantCulture, false, null),
                (17, "あ"                    , typeof(char?), InvariantCulture, true , 'あ'),
                (18, "あ"                    , typeof(char?), StubJPCulture   , true , 'あ'),
            },
            [typeof(DateTime)] = new TryParseTestCase[]{
                ( 1, ""                          , typeof(DateTime), InvariantCulture, false, null),
                ( 2, "0"                         , typeof(DateTime), InvariantCulture, false, null),
                ( 3, DateTime.MinValue.ToString(), typeof(DateTime), InvariantCulture, true , DateTime.Parse(DateTime.MinValue.ToString())),
                ( 4, DateTime.MaxValue.ToString(), typeof(DateTime), InvariantCulture, true , DateTime.Parse(DateTime.MaxValue.ToString())),
                ( 5, "+1"                        , typeof(DateTime), InvariantCulture, false, null),
                ( 6, "-1"                        , typeof(DateTime), InvariantCulture, false, null),
                ( 7, "0x10"                      , typeof(DateTime), InvariantCulture, false, null),
                ( 8, "1,234"                     , typeof(DateTime), InvariantCulture, true , new DateTime(234, 1, 1)),
                ( 9, "1,234.56"                  , typeof(DateTime), InvariantCulture, false, null),
                (10, null                        , typeof(DateTime), InvariantCulture, false, null),
                (11, "2018-2-15 13:00"           , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (12, "2018-2-15 13:00"           , typeof(DateTime), null            , true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (13, "2018/2/15 13:00"           , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (14, "\t\n 2018-2-15\t\n13:00\n ", typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (15, "2-15-2018 13:00"           , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (16, "2/15/2018 13:00"           , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (17, "2018/2/15 1:00 PM"         , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (18, "2018年2月15日 13時0分"     , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (19, "2018年 2月 15日 13時 0分"  , typeof(DateTime), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
            },
            [typeof(DateTime?)] = new TryParseTestCase[]{
                ( 1, ""                          , typeof(DateTime?), InvariantCulture, false, null),
                ( 2, "0"                         , typeof(DateTime?), InvariantCulture, false, null),
                ( 3, DateTime.MinValue.ToString(), typeof(DateTime?), InvariantCulture, true , DateTime.Parse(DateTime.MinValue.ToString())),
                ( 4, DateTime.MaxValue.ToString(), typeof(DateTime?), InvariantCulture, true , DateTime.Parse(DateTime.MaxValue.ToString())),
                ( 5, "+1"                        , typeof(DateTime?), InvariantCulture, false, null),
                ( 6, "-1"                        , typeof(DateTime?), InvariantCulture, false, null),
                ( 7, "0x10"                      , typeof(DateTime?), InvariantCulture, false, null),
                ( 8, "1,234"                     , typeof(DateTime?), InvariantCulture, true , new DateTime(234, 1, 1)),
                ( 9, "1,234.56"                  , typeof(DateTime?), InvariantCulture, false, null),
                (10, null                        , typeof(DateTime?), InvariantCulture, true , null),
                (11, "2018-2-15 13:00"           , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (12, "2018-2-15 13:00"           , typeof(DateTime?), null            , true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (13, "2018/2/15 13:00"           , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (14, "\t\n 2018-2-15\t\n13:00\n ", typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (15, "2-15-2018 13:00"           , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (16, "2/15/2018 13:00"           , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (17, "2018/2/15 1:00 PM"         , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (18, "2018年2月15日 13時0分"     , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
                (19, "2018年 2月 15日 13時 0分"  , typeof(DateTime?), InvariantCulture, true , new DateTime(2018, 2, 15, 13, 0, 0)),
            },
            [typeof(TimeSpan)] = new TryParseTestCase[]{
                ( 1, ""                          , typeof(TimeSpan), InvariantCulture, false, null),
                ( 2, "0"                         , typeof(TimeSpan), InvariantCulture, true , TimeSpan.Zero),
                ( 3, TimeSpan.MinValue.ToString(), typeof(TimeSpan), InvariantCulture, true , TimeSpan.Parse(TimeSpan.MinValue.ToString())),
                ( 4, TimeSpan.MaxValue.ToString(), typeof(TimeSpan), InvariantCulture, true , TimeSpan.Parse(TimeSpan.MaxValue.ToString())),
                ( 5, "+1"                        , typeof(TimeSpan), InvariantCulture, false, null),
                ( 6, "-1"                        , typeof(TimeSpan), InvariantCulture, true , new TimeSpan(-1, 0, 0, 0)),
                ( 7, "0x10"                      , typeof(TimeSpan), InvariantCulture, false, null),
                ( 8, "1,234"                     , typeof(TimeSpan), InvariantCulture, false, null),
                ( 9, "1,234.56"                  , typeof(TimeSpan), InvariantCulture, false, null),
                (10, null                        , typeof(TimeSpan), InvariantCulture, false, null),
                (11, "1.23:45:12.345"            , typeof(TimeSpan), InvariantCulture, true , new TimeSpan(1, 23, 45, 12, 345)),
                (12, "1.23:45:12.345"            , typeof(TimeSpan), null            , true , new TimeSpan(1, 23, 45, 12, 345)),
                (13, "\t\n 1.23:45:12.345\t\n "  , typeof(TimeSpan), InvariantCulture, true , new TimeSpan(1, 23, 45, 12, 345)),
                (14, "23 : 45 : 12"              , typeof(TimeSpan), InvariantCulture, false, null),
                (15, "11:45:12 PM"               , typeof(TimeSpan), InvariantCulture, false, null),
                (16, "1:23:45:12.345"            , typeof(TimeSpan), InvariantCulture, true , new TimeSpan(1, 23, 45, 12, 345)),
                (17, "+1.23:45:12.345"           , typeof(TimeSpan), InvariantCulture, false, null),
                (18, "-1.23:45:12.345"           , typeof(TimeSpan), InvariantCulture, true , -new TimeSpan(1, 23, 45, 12, 345)),
                (19, "1234.23:45:12.345"         , typeof(TimeSpan), InvariantCulture, true , new TimeSpan(1234, 23, 45, 12, 345)),
                (20, "1,234.23:45:12.345"        , typeof(TimeSpan), InvariantCulture, false, null),
            },
            [typeof(TimeSpan?)] = new TryParseTestCase[]{
                ( 1, ""                          , typeof(TimeSpan?), InvariantCulture, false, null),
                ( 2, "0"                         , typeof(TimeSpan?), InvariantCulture, true , TimeSpan.Zero),
                ( 3, TimeSpan.MinValue.ToString(), typeof(TimeSpan?), InvariantCulture, true , TimeSpan.Parse(TimeSpan.MinValue.ToString())),
                ( 4, TimeSpan.MaxValue.ToString(), typeof(TimeSpan?), InvariantCulture, true , TimeSpan.Parse(TimeSpan.MaxValue.ToString())),
                ( 5, "+1"                        , typeof(TimeSpan?), InvariantCulture, false, null),
                ( 6, "-1"                        , typeof(TimeSpan?), InvariantCulture, true , new TimeSpan(-1, 0, 0, 0)),
                ( 7, "0x10"                      , typeof(TimeSpan?), InvariantCulture, false, null),
                ( 8, "1,234"                     , typeof(TimeSpan?), InvariantCulture, false, null),
                ( 9, "1,234.56"                  , typeof(TimeSpan?), InvariantCulture, false, null),
                (10, null                        , typeof(TimeSpan?), InvariantCulture, true , null),
                (11, "1.23:45:12.345"            , typeof(TimeSpan?), InvariantCulture, true , new TimeSpan(1, 23, 45, 12, 345)),
                (12, "1.23:45:12.345"            , typeof(TimeSpan?), null            , true , new TimeSpan(1, 23, 45, 12, 345)),
                (13, "\t\n 1.23:45:12.345\t\n "  , typeof(TimeSpan?), InvariantCulture, true , new TimeSpan(1, 23, 45, 12, 345)),
                (14, "23 : 45 : 12"              , typeof(TimeSpan?), InvariantCulture, false, null),
                (15, "11:45:12 PM"               , typeof(TimeSpan?), InvariantCulture, false, null),
                (16, "1:23:45:12.345"            , typeof(TimeSpan?), InvariantCulture, true , new TimeSpan(1, 23, 45, 12, 345)),
                (17, "+1.23:45:12.345"           , typeof(TimeSpan?), InvariantCulture, false, null),
                (18, "-1.23:45:12.345"           , typeof(TimeSpan?), InvariantCulture, true , -new TimeSpan(1, 23, 45, 12, 345)),
                (19, "1234.23:45:12.345"         , typeof(TimeSpan?), InvariantCulture, true , new TimeSpan(1234, 23, 45, 12, 345)),
                (20, "1,234.23:45:12.345"        , typeof(TimeSpan?), InvariantCulture, false, null),
            },
            // Enum(byte)
            [typeof(ByteEnum)] = new TryParseTestCase[]{
                ( 1, ""                    , typeof(ByteEnum), InvariantCulture, false, null),
                ( 2, "0"                   , typeof(ByteEnum), InvariantCulture, true , (ByteEnum)0),
                ( 3, "0"                   , typeof(ByteEnum), null            , true , (ByteEnum)0),
                ( 4, "\t\n 1\t\n "         , typeof(ByteEnum), InvariantCulture, true , (ByteEnum)1),
                ( 5, nameof(ByteEnum.None) , typeof(ByteEnum), InvariantCulture, true , ByteEnum.None),
                ( 6, nameof(ByteEnum.Alpha), typeof(ByteEnum), InvariantCulture, true , ByteEnum.Alpha),
                ( 7, nameof(ByteEnum.Beta) , typeof(ByteEnum), InvariantCulture, true , ByteEnum.Beta),
                ( 8, "\t\n bETa \t\n "     , typeof(ByteEnum), InvariantCulture, true , ByteEnum.Beta),
                ( 9, "+1"                  , typeof(ByteEnum), InvariantCulture, true , (ByteEnum)1),
                (10, "-1"                  , typeof(ByteEnum), InvariantCulture, false, null),
                (11, "0x10"                , typeof(ByteEnum), InvariantCulture, false, null),
                (12, "1234"                , typeof(ByteEnum), InvariantCulture, false, null),
                (13, "1,234"               , typeof(ByteEnum), InvariantCulture, false, null),
                (14, "1,234.56"            , typeof(ByteEnum), InvariantCulture, false, null),
                (15, null                  , typeof(ByteEnum), InvariantCulture, false, null),
            },
            // Enum(byte)?
            [typeof(ByteEnum?)] = new TryParseTestCase[]{
                ( 1, ""                    , typeof(ByteEnum?), InvariantCulture, false, null),
                ( 2, "0"                   , typeof(ByteEnum?), InvariantCulture, true , (ByteEnum)0),
                ( 3, "0"                   , typeof(ByteEnum?), null            , true , (ByteEnum)0),
                ( 4, "\t\n 1\t\n "         , typeof(ByteEnum?), InvariantCulture, true , (ByteEnum)1),
                ( 5, nameof(ByteEnum.None) , typeof(ByteEnum?), InvariantCulture, true , ByteEnum.None),
                ( 6, nameof(ByteEnum.Alpha), typeof(ByteEnum?), InvariantCulture, true , ByteEnum.Alpha),
                ( 7, nameof(ByteEnum.Beta) , typeof(ByteEnum?), InvariantCulture, true , ByteEnum.Beta),
                ( 8, "\t\n bETa \t\n "     , typeof(ByteEnum?), InvariantCulture, true , ByteEnum.Beta),
                ( 9, "+1"                  , typeof(ByteEnum?), InvariantCulture, true , (ByteEnum)1),
                (10, "-1"                  , typeof(ByteEnum?), InvariantCulture, false, null),
                (11, "0x10"                , typeof(ByteEnum?), InvariantCulture, false, null),
                (12, "1234"                , typeof(ByteEnum?), InvariantCulture, false, null),
                (13, "1,234"               , typeof(ByteEnum?), InvariantCulture, false, null),
                (14, "1,234.56"            , typeof(ByteEnum?), InvariantCulture, false, null),
                (15, null                  , typeof(ByteEnum?), InvariantCulture, true , null),
            },
            // Enum(int)
            [typeof(IntEnum)] = new TryParseTestCase[]{
                ( 1, ""                   , typeof(IntEnum), InvariantCulture, false, null),
                ( 2, "0"                  , typeof(IntEnum), InvariantCulture, true , (IntEnum)0),
                ( 3, "0"                  , typeof(IntEnum), null            , true , (IntEnum)0),
                ( 4, "\t\n 1\t\n "        , typeof(IntEnum), InvariantCulture, true , (IntEnum)1),
                ( 5, nameof(IntEnum.None) , typeof(IntEnum), InvariantCulture, true , IntEnum.None),
                ( 6, nameof(IntEnum.Gamma), typeof(IntEnum), InvariantCulture, true , IntEnum.Gamma),
                ( 7, nameof(IntEnum.Delta), typeof(IntEnum), InvariantCulture, true , IntEnum.Delta),
                ( 8, "\t\n dELta \t\n "   , typeof(IntEnum), InvariantCulture, true , IntEnum.Delta),
                ( 9, "+1"                 , typeof(IntEnum), InvariantCulture, true , (IntEnum)1),
                (10, "-1"                 , typeof(IntEnum), InvariantCulture, true , (IntEnum)(-1)),
                (11, "0x10"               , typeof(IntEnum), InvariantCulture, false, null),
                (12, "1234"               , typeof(IntEnum), InvariantCulture, true , (IntEnum)1234),
                (13, "1,234"              , typeof(IntEnum), InvariantCulture, false, null),
                (14, "1,234.56"           , typeof(IntEnum), InvariantCulture, false, null),
                (15, null                 , typeof(IntEnum), InvariantCulture, false, null),
            },
            // Enum(int)?
            [typeof(IntEnum?)] = new TryParseTestCase[]{
                ( 1, ""                   , typeof(IntEnum?), InvariantCulture, false, null),
                ( 2, "0"                  , typeof(IntEnum?), InvariantCulture, true , (IntEnum)0),
                ( 3, "0"                  , typeof(IntEnum?), null            , true , (IntEnum)0),
                ( 4, "\t\n 1\t\n "        , typeof(IntEnum?), InvariantCulture, true , (IntEnum)1),
                ( 5, nameof(IntEnum.None) , typeof(IntEnum?), InvariantCulture, true , IntEnum.None),
                ( 6, nameof(IntEnum.Gamma), typeof(IntEnum?), InvariantCulture, true , IntEnum.Gamma),
                ( 7, nameof(IntEnum.Delta), typeof(IntEnum?), InvariantCulture, true , IntEnum.Delta),
                ( 8, "\t\n dELta \t\n "   , typeof(IntEnum?), InvariantCulture, true , IntEnum.Delta),
                ( 9, "+1"                 , typeof(IntEnum?), InvariantCulture, true , (IntEnum)1),
                (10, "-1"                 , typeof(IntEnum?), InvariantCulture, true , (IntEnum)(-1)),
                (11, "0x10"               , typeof(IntEnum?), InvariantCulture, false, null),
                (12, "1234"               , typeof(IntEnum?), InvariantCulture, true , (IntEnum)1234),
                (13, "1,234"              , typeof(IntEnum?), InvariantCulture, false, null),
                (14, "1,234.56"           , typeof(IntEnum?), InvariantCulture, false, null),
                (15, null                 , typeof(IntEnum?), InvariantCulture, true , null),
            },
            [typeof(Guid)] = new TryParseTestCase[]{
                ( 1, ""                                                , typeof(Guid), InvariantCulture, false, null),
                ( 2, "0"                                               , typeof(Guid), InvariantCulture, false, null),
                ( 3, Guid.Empty.ToString()                             , typeof(Guid), InvariantCulture, true , Guid.Empty),
                ( 4, "+1"                                              , typeof(Guid), InvariantCulture, false, null),
                ( 5, "-1"                                              , typeof(Guid), InvariantCulture, false, null),
                ( 6, "0x10"                                            , typeof(Guid), InvariantCulture, false, null),
                ( 7, "1,234"                                           , typeof(Guid), InvariantCulture, false, null),
                ( 8, "1,234.56"                                        , typeof(Guid), InvariantCulture, false, null),
                ( 9, null                                              , typeof(Guid), InvariantCulture, false, null),
                (10, "00000000-0000-0000-0000-000000000000"            , typeof(Guid), InvariantCulture, true , new Guid()),
                (11, "00000000-0000-0000-0000-000000000000"            , typeof(Guid), null            , true , new Guid()),
                (12, "00000000000000000000000000000000"                , typeof(Guid), InvariantCulture, true , new Guid()),
                (13, "{00000000-0000-0000-0000-000000000000}"          , typeof(Guid), InvariantCulture, true , new Guid()),
                (14, "{00000000-0000-0000-0000-000000000000"           , typeof(Guid), InvariantCulture, false, null),
                (15, "{00000000000000000000000000000000}"              , typeof(Guid), InvariantCulture, false, null),
                (16, "{ 00000000-0000-0000-0000-000000000000 }"        , typeof(Guid), InvariantCulture, false, null),
                (17, "\t\n 00000000-0000-0000-0000-000000000000\t\n "  , typeof(Guid), InvariantCulture, true , new Guid()),
                (18, "\t\n 00000000000000000000000000000000\t\n "      , typeof(Guid), InvariantCulture, true , new Guid()),
                (19, "\t\n {00000000-0000-0000-0000-000000000000}\t\n ", typeof(Guid), InvariantCulture, true , new Guid()),
                (20, "\t\n {00000000000000000000000000000000}\t\n "    , typeof(Guid), InvariantCulture, false, null),
                (21, "0000 0000 0000 0000 0000 0000 0000 0000"         , typeof(Guid), InvariantCulture, false, null),
                (22, "0000-0000-0000-0000-0000-0000-0000-0000"         , typeof(Guid), InvariantCulture, false, null),
                (23, "01234567-89ab-cdef-0123-456789abcdef"            , typeof(Guid), InvariantCulture, true , new Guid("01234567-89ab-cdef-0123-456789abcdef")),
            },
            [typeof(Guid?)] = new TryParseTestCase[]{
                ( 1, ""                                                , typeof(Guid?), InvariantCulture, false, null),
                ( 2, "0"                                               , typeof(Guid?), InvariantCulture, false, null),
                ( 3, Guid.Empty.ToString()                             , typeof(Guid?), InvariantCulture, true , Guid.Empty),
                ( 4, "+1"                                              , typeof(Guid?), InvariantCulture, false, null),
                ( 5, "-1"                                              , typeof(Guid?), InvariantCulture, false, null),
                ( 6, "0x10"                                            , typeof(Guid?), InvariantCulture, false, null),
                ( 7, "1,234"                                           , typeof(Guid?), InvariantCulture, false, null),
                ( 8, "1,234.56"                                        , typeof(Guid?), InvariantCulture, false, null),
                ( 9, null                                              , typeof(Guid?), InvariantCulture, true , null),
                (10, "00000000-0000-0000-0000-000000000000"            , typeof(Guid?), InvariantCulture, true , new Guid()),
                (11, "00000000-0000-0000-0000-000000000000"            , typeof(Guid?), null            , true , new Guid()),
                (12, "00000000000000000000000000000000"                , typeof(Guid?), InvariantCulture, true , new Guid()),
                (13, "{00000000-0000-0000-0000-000000000000}"          , typeof(Guid?), InvariantCulture, true , new Guid()),
                (14, "{00000000-0000-0000-0000-000000000000"           , typeof(Guid?), InvariantCulture, false, null),
                (15, "{00000000000000000000000000000000}"              , typeof(Guid?), InvariantCulture, false, null),
                (16, "{ 00000000-0000-0000-0000-000000000000 }"        , typeof(Guid?), InvariantCulture, false, null),
                (17, "\t\n 00000000-0000-0000-0000-000000000000\t\n "  , typeof(Guid?), InvariantCulture, true , new Guid()),
                (18, "\t\n 00000000000000000000000000000000\t\n "      , typeof(Guid?), InvariantCulture, true , new Guid()),
                (19, "\t\n {00000000-0000-0000-0000-000000000000}\t\n ", typeof(Guid?), InvariantCulture, true , new Guid()),
                (20, "\t\n {00000000000000000000000000000000}\t\n "    , typeof(Guid?), InvariantCulture, false, null),
                (21, "0000 0000 0000 0000 0000 0000 0000 0000"         , typeof(Guid?), InvariantCulture, false, null),
                (22, "0000-0000-0000-0000-0000-0000-0000-0000"         , typeof(Guid?), InvariantCulture, false, null),
                (23, "01234567-89ab-cdef-0123-456789abcdef"            , typeof(Guid?), InvariantCulture, true , new Guid("01234567-89ab-cdef-0123-456789abcdef")),
            },
            [typeof(string)] = new TryParseTestCase[]{
                ( 1, ""           , typeof(string), InvariantCulture, true, ""),
                ( 2, "0"          , typeof(string), InvariantCulture, true, "0"),
                ( 3, "0"          , typeof(string), null            , true, "0"),
                ( 4, "\t\n 0\t\n ", typeof(string), InvariantCulture, true, "\t\n 0\t\n "),
                ( 5, "+1"         , typeof(string), InvariantCulture, true, "+1"),
                ( 6, "-1"         , typeof(string), InvariantCulture, true, "-1"),
                ( 7, "0x10"       , typeof(string), InvariantCulture, true, "0x10"),
                ( 8, "1,234"      , typeof(string), InvariantCulture, true, "1,234"),
                ( 9, "1,234.56"   , typeof(string), InvariantCulture, true, "1,234.56"),
                (10, null         , typeof(string), InvariantCulture, true, null),
            },
            [typeof(Version)] = new TryParseTestCase[]{
                ( 1, ""                       , typeof(Version), InvariantCulture, false, null),
                ( 2, "0"                      , typeof(Version), InvariantCulture, false, null),
                ( 3, "+1"                     , typeof(Version), InvariantCulture, false, null),
                ( 4, "-1"                     , typeof(Version), InvariantCulture, false, null),
                ( 5, "0x10"                   , typeof(Version), InvariantCulture, false, null),
                ( 6, "1,234"                  , typeof(Version), InvariantCulture, false, null),
                ( 7, "1,234.56"               , typeof(Version), InvariantCulture, false, null),
                ( 8, null                     , typeof(Version), InvariantCulture, false, null),
                ( 9, "0.0"                    , typeof(Version), InvariantCulture, true , new Version(0, 0)),
                (10, "0.0"                    , typeof(Version), null            , true , new Version(0, 0)),
                (11, "0.0.0"                  , typeof(Version), InvariantCulture, true , new Version(0, 0, 0)),
                (12, "0.0.0.0"                , typeof(Version), InvariantCulture, true , new Version(0, 0, 0, 0)),
                (13, "0.0.0.0.0"              , typeof(Version), InvariantCulture, false, null),
                (14, "-1.0.0.0   "            , typeof(Version), InvariantCulture, false, null),
                (15, "1.2.3.4"                , typeof(Version), InvariantCulture, true , new Version(1, 2, 3, 4)),
                (16, "\t\n 1\t\n .\t\n 2\t\n ", typeof(Version), InvariantCulture, true , new Version(1, 2)),
                (17, ".1.2"                   , typeof(Version), InvariantCulture, false , null),
                (18, "1.2."                   , typeof(Version), InvariantCulture, false , null),
            },
            [typeof(Uri)] = new TryParseTestCase[]{
                ( 1, ""                             , typeof(Uri), InvariantCulture, false, null),
                ( 2, "0"                            , typeof(Uri), InvariantCulture, false, null),
                ( 3, "+1"                           , typeof(Uri), InvariantCulture, false, null),
                ( 4, "-1"                           , typeof(Uri), InvariantCulture, false, null),
                ( 5, "0x10"                         , typeof(Uri), InvariantCulture, false, null),
                ( 6, "1,234"                        , typeof(Uri), InvariantCulture, false, null),
                ( 7, "1,234.56"                     , typeof(Uri), InvariantCulture, false, null),
                ( 8, null                           , typeof(Uri), InvariantCulture, false, null),
                ( 9, "http://example.com"           , typeof(Uri), InvariantCulture, true, new Uri("http://example.com/")),
                (10, "http://example.com"           , typeof(Uri), null            , true, new Uri("http://example.com/")),
                (11, "\t\n http://example.com \t\n ", typeof(Uri), InvariantCulture, true, new Uri("http://example.com/")),
                (12, "http://にほんご.jp"           , typeof(Uri), InvariantCulture, true, new Uri("http://にほんご.jp/")),
                (13, "ftp://example.com"            , typeof(Uri), InvariantCulture, true, new Uri("ftp://example.com/")),
                (14, "file:///d:/temp.txt"          , typeof(Uri), InvariantCulture, true, new Uri("file:///d:/temp.txt")),
            },
            // Attributed TypeConverter class
            [typeof(TypeConvertableClass)] = new TryParseTestCase[]{
                ( 1, ""        , typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass(""        )),
                ( 2, "0"       , typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass("0"       )),
                ( 3, "+1"      , typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass("+1"      )),
                ( 4, "-1"      , typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass("-1"      )),
                ( 5, "0x10"    , typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass("0x10"    )),
                ( 6, "1,234"   , typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass("1,234"   )),
                ( 7, "1,234.56", typeof(TypeConvertableClass), InvariantCulture, true , new TypeConvertableClass("1,234.56")),
                ( 8, null      , typeof(TypeConvertableClass), InvariantCulture, false, null),
            },
            // Vanilla class
            [typeof(VanillaClass)] = new TryParseTestCase[]{
                ( 1, ""        , typeof(VanillaClass), InvariantCulture, false, null),
                ( 2, "0"       , typeof(VanillaClass), InvariantCulture, false, null),
                ( 3, "+1"      , typeof(VanillaClass), InvariantCulture, false, null),
                ( 4, "-1"      , typeof(VanillaClass), InvariantCulture, false, null),
                ( 5, "0x10"    , typeof(VanillaClass), InvariantCulture, false, null),
                ( 6, "1,234"   , typeof(VanillaClass), InvariantCulture, false, null),
                ( 7, "1,234.56", typeof(VanillaClass), InvariantCulture, false, null),
                ( 8, null      , typeof(VanillaClass), InvariantCulture, false, null),
            }
        };
    }
}